#!/usr/bin/env bash

# Terminate if command returns non-zero exit status
set -o errexit
# Terminate if variable is used which has not been initialized
set -o nounset

# DEPRECATED 2024-01-12: Check for minimum version of jq >= 1.7
if command -v jq >/dev/null; then
    jq_ver="$(jq --version)"
    jq_ver="${jq_ver#jq-}"
    if ! printf "1.7\n%s\n" "$jq_ver" | sort -V -C; then
        echo "Error: jq version is older than 1.7!"
        unset -v jq_ver
        exit 1
    fi
    unset -v jq_ver
fi

DOTDEPLOY_VERSION="0.2"
readonly DOTDEPLOY_VERSION

# FIXME: Move to better place
# set -o xtrace

# Print usage to stdout.
# Arguments:
#   None
# Outputs:
#   Print usage with examples.
show_help() {
    cat << EOF
Dotdeploy - Deploy dotfiles and system configuration

Usage:

    dotdeploy [options] <command>

For more information on a specific command, you can use 'dotdeploy <command> help'.

Choose one of the available commands:
       deploy               Deploy dotfiles
       help, -h, --help     Show this help message

Options:
       --dry-run            Only print the commands

Dotdeploy version: $DOTDEPLOY_VERSION
EOF
}


# If nothing is provided, show help and exit
if [[ $# -eq 0 ]]; then
    show_help
    exit
fi

dd_dryrun=0
dd_deploy=0

# Parse arguments
unknown=()

while (( $# > 0 )) ; do
    case $1 in
        help | --help | -h)
            # Show help message
            show_help
            exit 0
            ;;
        --dry-run)
            dd_dryrun=1
            ;;
        deploy)
            # Deploy modules
            dd_deploy=1
            shift
            break
            ;;
        --)
            shift
            break
            ;;
        -*)
            printf >&2 "Error: Unknown option %s\n" "$1"
            show_help
            exit 1
            ;;
        *)  # Unknown option
            unknown+=( "$1" )
            ;;
    esac
    # Shift to next argument
    shift
done

if [[ ! ${#unknown[@]} -eq 0 ]]; then
    echo "Error: Invalid command ${unknown[*]}"
    show_help
    exit 1
elif [[ $dd_deploy -eq 1 ]]; then
    # Libraries
    source "$(dirname "$(realpath "${BASH_SOURCE[0]}")")"/lib/common.sh
    source "$(dirname "$(realpath "${BASH_SOURCE[0]}")")"/lib/log.sh

    # Collect environment information
    dd_host_name="${dd_host_name:-$(dd::common::detect_host)}"
    dd_distro="${dd_distro:-$(dd::common::detect_distro)}"
    dd_is_container="${dd_is_container:-$(dd::common::detect_container)}"

    # Activate logging
    dd::log::log_on

    # Print basic information
    dd::log::log-info "$(printf '%-22s: %s' "Hostname" "$dd_host_name")"
    dd::log::log-info "$(printf '%-22s: %s' "Distribution" "$dd_distro")"
    dd::log::log-info "$(printf '%-22s: %s' "Container environment" "$dd_is_container")"
    dd::log::log-info "TMP directory set to $DOTDEPLOY_TMP_DIR"

    # Start deployment
    source "$(dirname "$(realpath "${BASH_SOURCE[0]}")")"/lib/deploy.sh
    dotdeploy_deploy "$@"
fi
